// FUNCTIONS
@function grid-cols-to-px-width($col-count, $gutter-count: $col-count - 1) {
    $px-width: ($col-count * $layout-col-width) + ($gutter-count * $layout-gutter-width);

    @return $px-width;
}

// MIXINS

// Grid-width
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
// FOR: Calculating percentage widths based on a column width, context, gutters
// WHY: Let's you think in terms of grid column-count and context and not do the math
// USE: @include grid-width(6);
// NOTE: Uses layout variables as defaults, located in variables.scss.

@mixin grid-width($col-count: 6, $context-col-count: $layout-col-count, $context-gutter-count: $context-col-count - 1, $gutter-count: $col-count - 1, $property: "width", $gallery-gutters: false) {
    $width: grid-cols-to-px-width($col-count, $gutter-count);
    $context-width: grid-cols-to-px-width($context-col-count, $context-gutter-count);
    $percentage-width: percentage($width / $context-width);

    #{$property}: $percentage-width;

    @if $gallery-gutters {
        $items-per-row: $context-col-count / $col-count;

        &:nth-of-type(n) {
            @include grid-width($col-count: 0, $gutter-count: 1, $context-col-count: $context-col-count, $property: "margin-right", $gallery-gutters: false);
        }

        &:nth-child(#{$items-per-row}n),
        &:last-child {
            margin-right: 0;
        }
    }
}

// https://css-tricks.com/snippets/css/prevent-long-urls-from-breaking-out-of-container/

@mixin word-wrap {
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-all;
    word-break: break-word;
    hyphens: auto;
}
